<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.geovis</groupId>
	<artifactId>miniService</artifactId>
	<packaging>jar</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>miniService</name>
	<url>http://maven.apache.org</url>
	<!-- 配置基于maven仓库的依赖 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.4.2.RELEASE</version>
	</parent>
	
	<properties>
		<!-- config mybatis start -->
		<mybatis.version>1.3.1</mybatis.version>
		<druid.version>1.1.3</druid.version>
		<!-- config mybatis end -->
	</properties>
	
	<!-- 配置依赖本地路径下的依赖库 -->
	<!-- <parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-dependencies</artifactId>
		<version>1.4.2.RELEASE</version>
		<relativePath>../../spring-boot-dependencies</relativePath>
	</parent> -->
	
	<dependencies>
		<!-- cache 缓存机制  start -->
		<dependency>  
		    <groupId>org.springframework.boot</groupId>  
		    <artifactId>spring-boot-starter-cache</artifactId>  
		</dependency> 
		<!-- cache 缓存机制 end -->
		
		<!-- mybatis 集成druid，使用连接池 start-->
		<dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>${druid.version}</version>
        </dependency>
		<!--  mybatis 集成druid，使用连接池 end -->
        
		<!--  devtools start
           	devtools可以实现页面热部署（即页面修改后会立即生效，这个可以直接在application.properties文件中配置spring.thymeleaf.cache=false来实现），      
           	实现类文件热部署（类文件修改后不会立即生效），实现对属性文件的热部署。   
          	 即devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），注意：因为其采用的虚拟机机制，该项重启是很快的      
        -->  
       <dependency>  
            <groupId>org.springframework.boot</groupId>  
            <artifactId>spring-boot-devtools</artifactId>  
            <optional>true</optional>  
        </dependency>
        <!-- devtools end -->
        
		<!-- 配置文件处理器 start -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- 配置文件处理器 end -->
		<!-- 数据库访问依赖 jpa start -->
		<dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-data-jpa</artifactId>
	    </dependency>
		<!-- jpa end -->
		
		<!-- postgresql start -->
		<dependency>  
		    <groupId>org.postgresql</groupId>  
		    <artifactId>postgresql</artifactId>
		</dependency>
		<!-- postgresql end -->
		
		<!-- log4j start -->
		<!-- 忽略自带的日志框架. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- log4j. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j</artifactId>
			<version>1.2.8.RELEASE</version>
		</dependency>
		<!-- log4j end -->
		<!-- <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-logging</artifactId>
		</dependency> -->
		
		<!-- redis start -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
		<!-- redis end -->
		
		<!-- swagger start -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.4.0</version>
		</dependency>
		
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.4.0</version>
		</dependency>
		<!-- swagger end -->
		
		<!-- OkHttp start -->
		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>okhttp</artifactId>
			<version>3.2.0</version>
		</dependency>
		<!-- OkHttp end -->
		
		<!-- web应用层依赖 start -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency> -->
		<!-- web应用层依赖  end -->
		
		<!-- <dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency> -->
   		
   		<!-- 解决jsp报错 -->
		<!-- <dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency> -->
		
		<!-- springboot unit test start -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- springboot unit test end -->
	</dependencies>
	<build>
		<finalName>miniService</finalName>
		<plugins>
			<!-- mvn clean package appassembler:assemble -->
			<!-- package appassembler:assemble -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<version>2.0.0</version>
				<configuration>
					<!-- 生成linux, windows两种平台的执行脚本 -->
					<platforms>
						<platform>windows</platform>
						<platform>unix</platform>
					</platforms>
					<!-- 根目录 -->
					<assembleDirectory>${project.build.directory}/${app.name}</assembleDirectory>
					<!-- 打包的jar，以及maven依赖的jar放到这个目录里面 -->
					<repositoryName>lib</repositoryName>
					<!-- 可执行脚本的目录 -->
					<binFolder>bin</binFolder>
					<!-- 配置文件的目标目录 -->
					<configurationDirectory>conf</configurationDirectory>
					<!-- 拷贝配置文件到上面的目录中 -->
					<copyConfigurationDirectory>true</copyConfigurationDirectory>
					<!-- 从哪里拷贝配置文件 (默认src/main/config) -->
					<configurationSourceDirectory>src/main/resources</configurationSourceDirectory>
					<!-- lib目录中jar的存放规则，默认是${groupId}/${artifactId}的目录格式，flat表示直接把jar放到lib目录 -->
					<repositoryLayout>flat</repositoryLayout>
					<encoding>UTF-8</encoding>
					<logsDirectory>logs</logsDirectory>
					<tempDirectory>tmp</tempDirectory>
					<programs>
						<program>
							<id>${app.name}</id>
							<!-- 启动类 -->
							<mainClass>com.geovis.pro.application</mainClass>
							<jvmSettings>
								<extraArguments>
									<extraArgument>-server</extraArgument>
									<extraArgument>-Xmx1G</extraArgument>
									<extraArgument>-Xms1G</extraArgument>
								</extraArguments>
							</jvmSettings>
						</program>
					</programs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<mainClass>com.geovis.pro.application</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<!--  热部署 start
             	用于将应用打成可直接运行的jar（该jar就是用于生产环境中的jar） 值得注意的是，如果没有引用spring-boot-starter-parent做parent,
             	且采用了上述的第二种方式，这里也要做出相应的改动  
             -->  
            <plugin>  
                <groupId>org.springframework.boot</groupId>  
                <artifactId>spring-boot-maven-plugin</artifactId>  
                <configuration>  
                   <!--fork :  如果没有该项配置，肯呢个devtools不会起作用，即应用不会restart -->  
                    <fork>true</fork>  
                </configuration>  
            </plugin>
            <!-- 热部署 end -->
		</plugins>
	</build>
</project>
